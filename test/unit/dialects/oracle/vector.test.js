'use strict';

const Support = require('../../support');
const DataTypes = require('sequelize/lib/data-types');
const expectsql = Support.expectsql;
const current = Support.sequelize;
const sql = current.dialect.queryGenerator;

if (current.dialect.name === 'oracle') {
  describe('VECTOR datatype', () => {
    const FooUser = current.define('user', {
      vecCol: {
        type: DataTypes.VECTOR,
        allowNull: false
      }
    });

    it('creates table with vector datatype', () => {
      expectsql(sql.createTableQuery(FooUser.getTableName(), sql.attributesToSQL(FooUser.rawAttributes), { }), {
        default: 'BEGIN EXECUTE IMMEDIATE \'CREATE TABLE "users" ("id" NUMBER(*,0) GENERATED BY DEFAULT ON NULL AS IDENTITY, "vecCol" VECTOR(*, *) NOT NULL, "createdAt" TIMESTAMP WITH LOCAL TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,PRIMARY KEY ("id"))\'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -955 THEN RAISE; END IF; END;' });
    });

  });

  describe('VECTOR datatype with dimension and format', () => {
    const FooUser = current.define('user', {
      vecCol: {
        type: DataTypes.VECTOR(3, 'float32'),
        allowNull: false
      }
    });

    it('creates table with vector datatype', () => {
      expectsql(sql.createTableQuery(FooUser.getTableName(), sql.attributesToSQL(FooUser.rawAttributes), { }), {
        default: 'BEGIN EXECUTE IMMEDIATE \'CREATE TABLE "users" ("id" NUMBER(*,0) GENERATED BY DEFAULT ON NULL AS IDENTITY, "vecCol" VECTOR(3, FLOAT32) NOT NULL, "createdAt" TIMESTAMP WITH LOCAL TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,PRIMARY KEY ("id"))\'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -955 THEN RAISE; END IF; END;' });
    });

  });

  describe('VECTOR datatype(binary)', () => {
    const FooUser = current.define('user', {
      vecCol: {
        type: DataTypes.VECTOR(16, 'binary'),
        allowNull: false
      }
    });

    it('creates table with vector datatype', () => {
      expectsql(sql.createTableQuery(FooUser.getTableName(), sql.attributesToSQL(FooUser.rawAttributes), { }), {
        default: 'BEGIN EXECUTE IMMEDIATE \'CREATE TABLE "users" ("id" NUMBER(*,0) GENERATED BY DEFAULT ON NULL AS IDENTITY, "vecCol" VECTOR(16, BINARY) NOT NULL, "createdAt" TIMESTAMP WITH LOCAL TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH LOCAL TIME ZONE NOT NULL,PRIMARY KEY ("id"))\'; EXCEPTION WHEN OTHERS THEN IF SQLCODE != -955 THEN RAISE; END IF; END;' });
    });

  });
}